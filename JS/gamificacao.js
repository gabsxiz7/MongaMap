let h2 = document.querySelector('h2');
let coordenadasElemento = document.getElementById("coordenadas");
var map;
var userMarker; // Vari√°vel global para o marcador do usu√°rio

// Inicializa o mapa
function success(pos) {
    console.log("üìç Nova localiza√ß√£o recebida:");
    console.log("Latitude:", pos.coords.latitude);
    console.log("Longitude:", pos.coords.longitude);
    console.log("Precis√£o (metros):", pos.coords.accuracy);

    const latitude = pos.coords.latitude;
    const longitude = pos.coords.longitude;

    // Atualiza as coordenadas na <p> correto
    coordenadasElemento.textContent = `Latitude: ${latitude.toFixed(6)}, Longitude: ${longitude.toFixed(6)}`;

    if (!map) {
        //se o mapa ainda n√£o foi criado, cria agora
        map = L.map('map').setView([latitude, longitude], 13);

        L.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        //adiciona o marcador inicial
        userMarker = L.marker([latitude, longitude]).addTo(map)
            .bindPopup('üìç Voc√™ est√° aqui!')
            .openPopup();
    } else {
        // Apenas move o marcador para a nova posi√ß√£o
        userMarker.setLatLng([latitude, longitude]);
        map.setView([latitude, longitude], 13);
    }

    // Adiciona os pontos tur√≠sticos apenas uma vez
    if (!map.pontosTuristicosAdicionados) {
        const pontosTuristicos = [
            { coords: [-24.134243, -46.692596], nome: 'Plataforma de Pesca', descricao: 'Local incr√≠vel para pesca e lazer.' },
            { coords: [-24.134406, -46.695230], nome: 'Parque Ecol√≥gico', descricao: 'Contato direto com a natureza.' },
            { coords: [-24.094984, -46.620291], nome: 'Par√≥quia Nossa Senhora Aparecida', descricao: 'Uma das constru√ß√µes mais antigas de Mongagu√°.' },
            { coords: [-24.132455, -46.711498], nome: 'Praia Fl√≥rida Mirim', descricao: 'Praia de √°guas limpas, ideal para fam√≠lias.' },
            { coords: [-24.09606, -46.62045], nome: 'Pra√ßa de Eventos Dudu Samba', descricao: 'Famosa pra√ßa de eventos culturais.' },
            { coords: [-24.08973, -46.62292], nome: 'Po√ßo das Antas', descricao: '√Årea natural para relaxar e explorar.' },
            { coords: [-24.09462, -46.61961], nome: 'Feira de Artesanato', descricao: 'Feira de produtos locais e artesanais.' },
            { coords: [-24.09119, -46.61684], nome: 'Morro da Padroeira', descricao: 'Vista panor√¢mica incr√≠vel da cidade.' },
            { coords: [-24.13087, -46.68704], nome: 'Praia Agenor de Campos', descricao: 'Praia estruturada com quiosques e atividades.' },
            { coords: [-24.10203, -46.63637], nome: 'Centro Cultural Raul Cortez', descricao: 'Tem seu nome em homenagem ao ator Raul Cortez e √© o cora√ß√£o da cena cultural de Mongagu√°.' }
        ];

        pontosTuristicos.forEach(ponto => {
            L.marker(ponto.coords).addTo(map)
                .bindPopup(`<b>${ponto.nome}</b><br>${ponto.descricao}`);
        });

        map.pontosTuristicosAdicionados = true; // Evita adicionar m√∫ltiplas vezes
    }
}

// Tratamento de erro
function error(err) {
    console.error(err);
    h2.textContent = 'N√£o foi poss√≠vel obter sua localiza√ß√£o.';
}

// Solicita localiza√ß√£o do usu√°rio
navigator.geolocation.getCurrentPosition(success, error, {
    enableHighAccuracy: true,
    timeout: 10000, // Tempo m√°ximo para resposta (10s)
    maximumAge: 0   // For√ßa atualiza√ß√£o e evita cache antigo
});

// Fun√ß√£o para marcar pontos tur√≠sticos no mapa
function marcarMapa(latitude, longitude) {
    map.setView([latitude, longitude], 16); // Centraliza o mapa no ponto tur√≠stico
    L.marker([latitude, longitude]).addTo(map)
        .bindPopup('<strong>Ponto Selecionado</strong>')
        .openPopup();
}

// Pequeno atraso para garantir que o mapa foi atualizado antes da rolagem
setTimeout(() => {
    let mapaElemento = document.getElementById("map");

    if (mapaElemento && mapaElemento.offsetHeight > 0) {
        window.scrollTo({
            top: mapaElemento.offsetTop - 100,
            behavior: "smooth"
        });
    }
}, 300);

// Dados do usu√°rio
let usuario = {
    nome: "BlackN444",
    foto: "IMG/icon.png",
    pontos: 320,
    nivel: "Explorador",
    conquistas: [
        { nome: "Visitou a Plataforma de Pesca", pontos: 50 },
        {nome: "Visitou o Parque Ecol√≥gico A Tribuna", pontos: 50},
        {nome: "Visitou a Par√≥quia Nossa Senhora Aparecida", pontos: 50},
        { nome: "Completou o desafio 'Explorador'", pontos: 100 }
    ],
    missoes: [
        { nome: "Visite 5 pontos tur√≠sticos", pontos: 100, concluida: true },
        { nome: "Compartilhe sua experi√™ncia", pontos: 50, concluida: false },
    ]
};

// Atualiza a exibi√ß√£o do usu√°rio
function atualizarUsuario() {
    document.getElementById("nomeUsuario").textContent = usuario.nome;
    document.getElementById("fotoUsuario").src = usuario.foto;
    document.getElementById("pontuacaoUsuario").textContent = `Pontua√ß√£o: ${usuario.pontos} ‚≠ê`;

    //atualiza o nivel do usuario de acordo cm a pontuacao
    if (usuario.pontos >= 5000) {
        usuario.nivel = "Mestre do Mapa";
    } else if (usuario.pontos >= 200) {
        usuario.nivel = "Explorador";
    } else {
        usuario.nivel = "Iniciante";
    }
    document.getElementById("nivelUsuario").textContent = `N√≠vel: ${usuario.nivel}`;

    //atualiza a barra de progresso
    let progressBar = document.querySelector(".barra-progresso progress");
    progressBar.value = usuario.pontos;
    progressBar.max = 5000;
    document.getElementById("progressText").textContent = `${usuario.pontos} / 5000 pontos`;
    
    //atualiza a lista de conquistas
    let listaConquistas = document.getElementById("listaConquistas");
    listaConquistas.innerHTML = "";
    usuario.conquistas.forEach(conquista => {
        let li = document.createElement("li");
        li.innerHTML = `üèÜ ${conquista.nome} <strong>+${conquista.pontos} pontos</strong>`;
        listaConquistas.appendChild(li);
    });
    
    //atualiza lista de missoes cm eventos de clique
    let listaMissoes = document.getElementById("listaMissoes");
    listaMissoes.innerHTML = "";

    usuario.missoes.forEach((missao, index) => {
        let li = document.createElement("li");
        li.innerHTML = `${missao.concluida ? "‚úÖ" : "üìú"} ${missao.nome} - <strong>+${missao.pontos} pontos</strong>`;
        
        if (!missao.concluida) {
            li.style.cursor = "pointer";
            li.style.color = "blue"; // Indica que √© clic√°vel
            
            li.addEventListener("click", function () {
                concluirMissao(index);
            });
        }
        
        listaMissoes.appendChild(li);
    });
    //salva os dados atualizados no localStorage
    localStorage.setItem("usuario", JSON.stringify(usuario));
}

//fun√ß√£o para concluir uma miss√£o
function concluirMissao(index) {
    console.log("Clicou na miss√£o:", index); //testando p ve c ta funcionando o click
    let missao = usuario.missoes[index];

    if (!missao.concluida) {
        missao.concluida = true;  //aqui marca a missao como concluida
        usuario.pontos += missao.pontos;

        //adiciona a miss√£o √†s conquistas
        usuario.conquistas.push({
            nome: missao.nome,
            pontos: missao.pontos
        });

        console.log("Miss√£o conclu√≠da:", missao); //testando se a miss√£o foi atualizada certo
        console.log("Usu√°rio atualizado:", usuario.pontos);

      //importante: re-salvar o objt atualizado no localStorage
      usuario.missoes[index] = missao; //esta linha √© pra garantir q o objt no array seja atualizado corretamente
       localStorage.setItem("usuario", JSON.stringify(usuario));
        
        atualizarUsuario(); //atualiza a tela

        //for√ßa a atualizar a tela
        setTimeout(() => {
            location.reload();
        }, 500);
    }
}
// Verifica se h√° dados salvos no localStorage
if (localStorage.getItem("usuario")) {
    usuario = JSON.parse(localStorage.getItem("usuario"));

    usuario.missoes = usuario.missoes.map(missao => ({
        ...missao,
        concluida: missao.concluida || false //c nao existir √© p definir false
    }));

    //salva de volta no localStorage para corrigir os dados
    localStorage.setItem("Usuario", JSON.stringify(usuario));
}


//qr code
document.addEventListener("DOMContentLoaded", function () {
    let usuario = JSON.parse(localStorage.getItem("usuario")) || {
        nome: "Usu√°rio",
        pontos: 0,
        conquistas: []
    };

    document.getElementById("nomeUsuario").textContent = usuario.nome;
    document.getElementById("pontuacaoUsuario").textContent = `Pontua√ß√£o: ${usuario.pontos} ‚≠ê`;

    let listaConquistas = document.getElementById("listaConquistas");
    listaConquistas.innerHTML = "";

    usuario.conquistas.forEach(conquista => {
        let li = document.createElement("li");
        li.innerHTML = `üèÜ ${conquista.nome} <strong>+${conquista.pontos} pontos</strong>`;
        listaConquistas.appendChild(li);
    });

    // Verifica se veio da p√°gina de QR Code
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get("recompensa") === "1") {
        alert("üéä Voc√™ recebeu uma nova recompensa pelo QR Code!");
    }
});

